// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"rpc/dial/yamutech/com"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  RetCode systemCommand(SysCommand cmdType)")
	fmt.Fprintln(os.Stderr, "  RetCode addHealthGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode delHealthGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode addHealthRecord(string groupName,  records)")
	fmt.Fprintln(os.Stderr, "  RetCode delHealthRecord(string groupName,  records)")
	fmt.Fprintln(os.Stderr, "  RetCode addHealthPolicy(HealthPolicyInfo policy)")
	fmt.Fprintln(os.Stderr, "  RetCode modHealthPolicy(HealthPolicyInfo policy)")
	fmt.Fprintln(os.Stderr, "  RetCode delHealthPolicy(HealthPolicyInfo policy)")
	fmt.Fprintln(os.Stderr, "  RetCode addDialServer(ObjectId rid, IpAddr ip, DialServerType typ)")
	fmt.Fprintln(os.Stderr, "  RetCode delDialServer(ObjectId rid)")
	fmt.Fprintln(os.Stderr, "  RetCode addNginxGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode delNginxGroup(string groupName, string policyName)")
	fmt.Fprintln(os.Stderr, "  RetCode addNginxServer(string groupName,  servers)")
	fmt.Fprintln(os.Stderr, "  RetCode delNginxServer(string groupName,  servers)")
	fmt.Fprintln(os.Stderr, "  HeartBeatState heartBeat()")
	fmt.Fprintln(os.Stderr, "  RetCode setServerState(bool enable)")
	fmt.Fprintln(os.Stderr, "  RetCode addSnmpGroupInfo(SnmpGroupInfo snmp)")
	fmt.Fprintln(os.Stderr, "  RetCode delSnmpGroupInfo(string snmp)")
	fmt.Fprintln(os.Stderr, "  RetCode addSnmpProcessInfo(string snmp, string processname)")
	fmt.Fprintln(os.Stderr, "  RetCode delSnmpProcessInfo(string snmp, string processname)")
	fmt.Fprintln(os.Stderr, "  RetCode addIpSec(SysIpSec ipsec, i32 interval)")
	fmt.Fprintln(os.Stderr, "  RetCode delIpSec(string ipsecid)")
	fmt.Fprintln(os.Stderr, "  RetCode addDcInfo(DcInfo dc)")
	fmt.Fprintln(os.Stderr, "  RetCode delDcInfo(string id)")
	fmt.Fprintln(os.Stderr, "  RetCode heartBeatDial()")
	fmt.Fprintln(os.Stderr, "  RetCode resetModule()")
	fmt.Fprintln(os.Stderr, "  RetCode addDialIpSec( ipSecList)")
	fmt.Fprintln(os.Stderr, "  RetCode removeDialIpSec( ipSecList)")
	fmt.Fprintln(os.Stderr, "  RetCode clearDialPlatformIpSec()")
	fmt.Fprintln(os.Stderr, "  RetCode addDialDomain(string groupId,  DomainList)")
	fmt.Fprintln(os.Stderr, "  RetCode removeDialDomain(string groupId,  DomainList)")
	fmt.Fprintln(os.Stderr, "  RetCode clearDialDomain(string groupId)")
	fmt.Fprintln(os.Stderr, "  RetCode addDialTask(string taskId, DialMethod method,  targetList, IpAddr sourceip, i32 interval, string domainGroupId)")
	fmt.Fprintln(os.Stderr, "  RetCode removeDialTask(string taskId)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := com.NewDialClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "systemCommand":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SystemCommand requires 1 args")
			flag.Usage()
		}
		tmp0, err := (strconv.Atoi(flag.Arg(1)))
		if err != nil {
			Usage()
			return
		}
		argvalue0 := com.SysCommand(tmp0)
		value0 := argvalue0
		fmt.Print(client.SystemCommand(value0))
		fmt.Print("\n")
		break
	case "addHealthGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddHealthGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddHealthGroup(value0, value1))
		fmt.Print("\n")
		break
	case "delHealthGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelHealthGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DelHealthGroup(value0, value1))
		fmt.Print("\n")
		break
	case "addHealthRecord":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddHealthRecord requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg227 := flag.Arg(2)
		mbTrans228 := thrift.NewTMemoryBufferLen(len(arg227))
		defer mbTrans228.Close()
		_, err229 := mbTrans228.WriteString(arg227)
		if err229 != nil {
			Usage()
			return
		}
		factory230 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt231 := factory230.GetProtocol(mbTrans228)
		containerStruct1 := com.NewDialAddHealthRecordArgs()
		err232 := containerStruct1.ReadField2(jsProt231)
		if err232 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Records
		value1 := argvalue1
		fmt.Print(client.AddHealthRecord(value0, value1))
		fmt.Print("\n")
		break
	case "delHealthRecord":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelHealthRecord requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg234 := flag.Arg(2)
		mbTrans235 := thrift.NewTMemoryBufferLen(len(arg234))
		defer mbTrans235.Close()
		_, err236 := mbTrans235.WriteString(arg234)
		if err236 != nil {
			Usage()
			return
		}
		factory237 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt238 := factory237.GetProtocol(mbTrans235)
		containerStruct1 := com.NewDialDelHealthRecordArgs()
		err239 := containerStruct1.ReadField2(jsProt238)
		if err239 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Records
		value1 := argvalue1
		fmt.Print(client.DelHealthRecord(value0, value1))
		fmt.Print("\n")
		break
	case "addHealthPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddHealthPolicy requires 1 args")
			flag.Usage()
		}
		arg240 := flag.Arg(1)
		mbTrans241 := thrift.NewTMemoryBufferLen(len(arg240))
		defer mbTrans241.Close()
		_, err242 := mbTrans241.WriteString(arg240)
		if err242 != nil {
			Usage()
			return
		}
		factory243 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt244 := factory243.GetProtocol(mbTrans241)
		argvalue0 := com.NewHealthPolicyInfo()
		err245 := argvalue0.Read(jsProt244)
		if err245 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddHealthPolicy(value0))
		fmt.Print("\n")
		break
	case "modHealthPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ModHealthPolicy requires 1 args")
			flag.Usage()
		}
		arg246 := flag.Arg(1)
		mbTrans247 := thrift.NewTMemoryBufferLen(len(arg246))
		defer mbTrans247.Close()
		_, err248 := mbTrans247.WriteString(arg246)
		if err248 != nil {
			Usage()
			return
		}
		factory249 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt250 := factory249.GetProtocol(mbTrans247)
		argvalue0 := com.NewHealthPolicyInfo()
		err251 := argvalue0.Read(jsProt250)
		if err251 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ModHealthPolicy(value0))
		fmt.Print("\n")
		break
	case "delHealthPolicy":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelHealthPolicy requires 1 args")
			flag.Usage()
		}
		arg252 := flag.Arg(1)
		mbTrans253 := thrift.NewTMemoryBufferLen(len(arg252))
		defer mbTrans253.Close()
		_, err254 := mbTrans253.WriteString(arg252)
		if err254 != nil {
			Usage()
			return
		}
		factory255 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt256 := factory255.GetProtocol(mbTrans253)
		argvalue0 := com.NewHealthPolicyInfo()
		err257 := argvalue0.Read(jsProt256)
		if err257 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DelHealthPolicy(value0))
		fmt.Print("\n")
		break
	case "addDialServer":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AddDialServer requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := com.ObjectId(argvalue0)
		arg259 := flag.Arg(2)
		mbTrans260 := thrift.NewTMemoryBufferLen(len(arg259))
		defer mbTrans260.Close()
		_, err261 := mbTrans260.WriteString(arg259)
		if err261 != nil {
			Usage()
			return
		}
		factory262 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt263 := factory262.GetProtocol(mbTrans260)
		argvalue1 := com.NewIpAddr()
		err264 := argvalue1.Read(jsProt263)
		if err264 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := com.DialServerType(tmp2)
		value2 := argvalue2
		fmt.Print(client.AddDialServer(value0, value1, value2))
		fmt.Print("\n")
		break
	case "delDialServer":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelDialServer requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := com.ObjectId(argvalue0)
		fmt.Print(client.DelDialServer(value0))
		fmt.Print("\n")
		break
	case "addNginxGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddNginxGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddNginxGroup(value0, value1))
		fmt.Print("\n")
		break
	case "delNginxGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelNginxGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DelNginxGroup(value0, value1))
		fmt.Print("\n")
		break
	case "addNginxServer":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddNginxServer requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg271 := flag.Arg(2)
		mbTrans272 := thrift.NewTMemoryBufferLen(len(arg271))
		defer mbTrans272.Close()
		_, err273 := mbTrans272.WriteString(arg271)
		if err273 != nil {
			Usage()
			return
		}
		factory274 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt275 := factory274.GetProtocol(mbTrans272)
		containerStruct1 := com.NewDialAddNginxServerArgs()
		err276 := containerStruct1.ReadField2(jsProt275)
		if err276 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Servers
		value1 := argvalue1
		fmt.Print(client.AddNginxServer(value0, value1))
		fmt.Print("\n")
		break
	case "delNginxServer":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelNginxServer requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg278 := flag.Arg(2)
		mbTrans279 := thrift.NewTMemoryBufferLen(len(arg278))
		defer mbTrans279.Close()
		_, err280 := mbTrans279.WriteString(arg278)
		if err280 != nil {
			Usage()
			return
		}
		factory281 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt282 := factory281.GetProtocol(mbTrans279)
		containerStruct1 := com.NewDialDelNginxServerArgs()
		err283 := containerStruct1.ReadField2(jsProt282)
		if err283 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Servers
		value1 := argvalue1
		fmt.Print(client.DelNginxServer(value0, value1))
		fmt.Print("\n")
		break
	case "heartBeat":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "HeartBeat requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.HeartBeat())
		fmt.Print("\n")
		break
	case "setServerState":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetServerState requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1) == "true"
		value0 := argvalue0
		fmt.Print(client.SetServerState(value0))
		fmt.Print("\n")
		break
	case "addSnmpGroupInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSnmpGroupInfo requires 1 args")
			flag.Usage()
		}
		arg285 := flag.Arg(1)
		mbTrans286 := thrift.NewTMemoryBufferLen(len(arg285))
		defer mbTrans286.Close()
		_, err287 := mbTrans286.WriteString(arg285)
		if err287 != nil {
			Usage()
			return
		}
		factory288 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt289 := factory288.GetProtocol(mbTrans286)
		argvalue0 := com.NewSnmpGroupInfo()
		err290 := argvalue0.Read(jsProt289)
		if err290 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSnmpGroupInfo(value0))
		fmt.Print("\n")
		break
	case "delSnmpGroupInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelSnmpGroupInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DelSnmpGroupInfo(value0))
		fmt.Print("\n")
		break
	case "addSnmpProcessInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddSnmpProcessInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddSnmpProcessInfo(value0, value1))
		fmt.Print("\n")
		break
	case "delSnmpProcessInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelSnmpProcessInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DelSnmpProcessInfo(value0, value1))
		fmt.Print("\n")
		break
	case "addIpSec":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddIpSec requires 2 args")
			flag.Usage()
		}
		arg296 := flag.Arg(1)
		mbTrans297 := thrift.NewTMemoryBufferLen(len(arg296))
		defer mbTrans297.Close()
		_, err298 := mbTrans297.WriteString(arg296)
		if err298 != nil {
			Usage()
			return
		}
		factory299 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt300 := factory299.GetProtocol(mbTrans297)
		argvalue0 := com.NewSysIpSec()
		err301 := argvalue0.Read(jsProt300)
		if err301 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err302 := (strconv.Atoi(flag.Arg(2)))
		if err302 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.AddIpSec(value0, value1))
		fmt.Print("\n")
		break
	case "delIpSec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelIpSec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DelIpSec(value0))
		fmt.Print("\n")
		break
	case "addDcInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDcInfo requires 1 args")
			flag.Usage()
		}
		arg304 := flag.Arg(1)
		mbTrans305 := thrift.NewTMemoryBufferLen(len(arg304))
		defer mbTrans305.Close()
		_, err306 := mbTrans305.WriteString(arg304)
		if err306 != nil {
			Usage()
			return
		}
		factory307 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt308 := factory307.GetProtocol(mbTrans305)
		argvalue0 := com.NewDcInfo()
		err309 := argvalue0.Read(jsProt308)
		if err309 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDcInfo(value0))
		fmt.Print("\n")
		break
	case "delDcInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DelDcInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DelDcInfo(value0))
		fmt.Print("\n")
		break
	case "heartBeatDial":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "HeartBeatDial requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.HeartBeatDial())
		fmt.Print("\n")
		break
	case "resetModule":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ResetModule requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ResetModule())
		fmt.Print("\n")
		break
	case "addDialIpSec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDialIpSec requires 1 args")
			flag.Usage()
		}
		arg311 := flag.Arg(1)
		mbTrans312 := thrift.NewTMemoryBufferLen(len(arg311))
		defer mbTrans312.Close()
		_, err313 := mbTrans312.WriteString(arg311)
		if err313 != nil {
			Usage()
			return
		}
		factory314 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt315 := factory314.GetProtocol(mbTrans312)
		containerStruct0 := com.NewDialAddDialIpSecArgs()
		err316 := containerStruct0.ReadField1(jsProt315)
		if err316 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.IpSecList
		value0 := argvalue0
		fmt.Print(client.AddDialIpSec(value0))
		fmt.Print("\n")
		break
	case "removeDialIpSec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveDialIpSec requires 1 args")
			flag.Usage()
		}
		arg317 := flag.Arg(1)
		mbTrans318 := thrift.NewTMemoryBufferLen(len(arg317))
		defer mbTrans318.Close()
		_, err319 := mbTrans318.WriteString(arg317)
		if err319 != nil {
			Usage()
			return
		}
		factory320 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt321 := factory320.GetProtocol(mbTrans318)
		containerStruct0 := com.NewDialRemoveDialIpSecArgs()
		err322 := containerStruct0.ReadField1(jsProt321)
		if err322 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.IpSecList
		value0 := argvalue0
		fmt.Print(client.RemoveDialIpSec(value0))
		fmt.Print("\n")
		break
	case "clearDialPlatformIpSec":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ClearDialPlatformIpSec requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ClearDialPlatformIpSec())
		fmt.Print("\n")
		break
	case "addDialDomain":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddDialDomain requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg324 := flag.Arg(2)
		mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
		defer mbTrans325.Close()
		_, err326 := mbTrans325.WriteString(arg324)
		if err326 != nil {
			Usage()
			return
		}
		factory327 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt328 := factory327.GetProtocol(mbTrans325)
		containerStruct1 := com.NewDialAddDialDomainArgs()
		err329 := containerStruct1.ReadField2(jsProt328)
		if err329 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.DomainList
		value1 := argvalue1
		fmt.Print(client.AddDialDomain(value0, value1))
		fmt.Print("\n")
		break
	case "removeDialDomain":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveDialDomain requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg331 := flag.Arg(2)
		mbTrans332 := thrift.NewTMemoryBufferLen(len(arg331))
		defer mbTrans332.Close()
		_, err333 := mbTrans332.WriteString(arg331)
		if err333 != nil {
			Usage()
			return
		}
		factory334 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt335 := factory334.GetProtocol(mbTrans332)
		containerStruct1 := com.NewDialRemoveDialDomainArgs()
		err336 := containerStruct1.ReadField2(jsProt335)
		if err336 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.DomainList
		value1 := argvalue1
		fmt.Print(client.RemoveDialDomain(value0, value1))
		fmt.Print("\n")
		break
	case "clearDialDomain":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearDialDomain requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ClearDialDomain(value0))
		fmt.Print("\n")
		break
	case "addDialTask":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "AddDialTask requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := com.DialMethod(tmp1)
		value1 := argvalue1
		arg339 := flag.Arg(3)
		mbTrans340 := thrift.NewTMemoryBufferLen(len(arg339))
		defer mbTrans340.Close()
		_, err341 := mbTrans340.WriteString(arg339)
		if err341 != nil {
			Usage()
			return
		}
		factory342 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt343 := factory342.GetProtocol(mbTrans340)
		containerStruct2 := com.NewDialAddDialTaskArgs()
		err344 := containerStruct2.ReadField3(jsProt343)
		if err344 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TargetList
		value2 := argvalue2
		arg345 := flag.Arg(4)
		mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
		defer mbTrans346.Close()
		_, err347 := mbTrans346.WriteString(arg345)
		if err347 != nil {
			Usage()
			return
		}
		factory348 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt349 := factory348.GetProtocol(mbTrans346)
		argvalue3 := com.NewIpAddr()
		err350 := argvalue3.Read(jsProt349)
		if err350 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err351 := (strconv.Atoi(flag.Arg(5)))
		if err351 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		fmt.Print(client.AddDialTask(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "removeDialTask":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveDialTask requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveDialTask(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
